//<! channel> Histogram

List<Mat> images = new ArrayList<Mat>();
    	
// set the number of bins at 256
MatOfInt histSize = new MatOfInt(256);
// only one channel
MatOfInt channels = new MatOfInt(0);
// set the ranges
MatOfFloat histRange = new MatOfFloat(0, 256);
		
// compute the histograms for the B, G and R components
Mat hist_b = new Mat();
Mat hist_g = new Mat();
Mat hist_r = new Mat();
		
// draw the histogram
int hist_w = 300; // width of the histogram image
int hist_h = 300 ; // height of the histogram image
int bin_w = (int) Math.round(hist_w / histSize.get(0, 0)[0]);

//The <! OUTPUT>
Mat histImage = new Mat(hist_h, hist_w, CvType.CV_8UC3, new Scalar(0, 0, 0));

Core.split(<! INPUT>, images);
Imgproc.calcHist(images.subList(2, 3), channels, new Mat(), hist_r, histSize, histRange, false);
Core.normalize(hist_r, hist_r, 0, histImage.rows(), Core.NORM_MINMAX, -1, new Mat());

Core.split(input, images);
Imgproc.calcHist(images.subList(0, 1), channels, new Mat(), hist_b, histSize, histRange, false);
Core.normalize(hist_b, hist_b, 0, histImage.rows(), Core.NORM_MINMAX, -1, new Mat());

for (int i = 1; i < histSize.get(0, 0)[0]; i++)
     Core.line(histImage, new Point(bin_w * (i - 1), hist_h - Math.round(hist_b.get(i - 1, 0)[0])), new Point(
		bin_w * (i), hist_h - Math.round(hist_b.get(i, 0)[0])), new Scalar(255, 0, 0), 2, 8, 0);

return histImage;